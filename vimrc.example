let g:dotvim_settings = {}
if has('gui_running')
  let g:dotvim_settings.colorscheme = 'luna'
else 
  let g:dotvim_settings.colorscheme = 'luna-term'
endif
let g:dotvim_settings.autocomplete_method = 'ycm'
let g:dotvim_settings.plugin_groups = ['core', 'web','javascript', 'navigation', 'unite', 'indents', 'editing', 'autocomplete', 'scm', "tmux", "misc"]
let g:dotvim_settings.disabled_plugins=[]
let g:dotvim_settings.version = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
" powerline symbols
"let g:airline_left_sep = ''
"let g:airline#extensions#tabline#left_sep=''
"let g:airline#extensions#tabline#left_alt_sep=''
"let g:airline_left_alt_sep = ''
"let g:airline_right_sep = ''
"let g:airline_right_alt_sep = ''
"let g:airline_symbols.branch = ''
"let g:airline_symbols.readonly = ''
"let g:airline_symbols.linenr = ''
" auto pair toggle {{{
  let g:AutoPairsShortcutToggle = "<C-S-p>"
" }}}
let g:markdown_fenced_languages = ['javascript']
let g:goldenview__enable_at_startup = 0
source ~/.vim/vimrc
set shell=/bin/bash
"
" Node JS
"
set wildignore+=*/node_modules/*

" hotkeys {{{
  " Tagbar
  noremap <silent> <Leader>t :TagbarToggle<CR>

  " Quick Fix Bar
  nnoremap <silent> <Leader>f :botright copen<CR>

  " <Leader>x Open Shell
  nnoremap <Leader>x :ConqueTerm zsh

  " <Leader>q Close Buffer
  nnoremap <silent> <Leader>q :call CloseWindowOrKillBuffer()<cr>

  " <Leader>d Kill Buffer, Keep Split
  nnoremap <silent> <leader>d :BD<CR>

  " Clear Highlights on Enter
  nnoremap <CR> :nohlsearch<CR>/<BS>

  " Mac-specific hotkeys {{{
    source ~/.vim/mac.vim
  " }}}

" NERDTree {{{
  let NERDTreeShowBookmarks=1
  let NERDTreeShowHidden=1
  let NERDTreeShowLineNumbers=0
" }}}



"NeoBundle 'jtratner/vim-flavored-markdown'
"NeoBundle 'troydm/shellasync.vim'

"===============================================================================
" VDebug
"===============================================================================
NeoBundle 'joonty/vdebug'
NeoBundle 'AsyncCommand'
NeoBundle 'Shougo/vinarise.vim'
let g:vdebug_keymap = {
\    "run" : "<leader>r",
\    "run_to_cursor" : "<leader><leader>r",
\    "step_over" : "<leader><leader>s",
\    "step_into" : "<leader><leader>i",
\    "step_out" : "<leader><leader>o",
\    "close" : "<leader><leader>c",
\    "detach" : "<leader><leader>d",
\    "set_breakpoint" : "<leader><leader>b",
\    "get_context" : "<leader><leader>g",
\    "eval_under_cursor" : "<leader><leader>e",
\    "eval_visual" : "<Leader>e",
\}

" javascript tab spaces/autocomplete
" Close after lookup
let g:ycm_autoclose_preview_window_after_completion = 1
" Enable tab for selection

" Disable ugly scroll  bars
set guioptions-=L
set guioptions-=r

" Node hotkeys
autocmd User Node
 \ if &filetype == "javascript" | 
 \ setlocal expandtab |
 \ setlocal tabstop=2 |
 \ setlocal shiftwidth=2 |
 \ noremap <buffer> <leader>re :TernRename<CR> |
 \ noremap <buffer> <leader>t :TernType<CR> |
 \ noremap <buffer> <C-d> :TernDoc<CR> |
 \ noremap <buffer>  :TernRefs<CR> |
 \ endif

"{{{ markdown
 autocmd FileType markdown setlocal nonu lsp=8 guifont=Source_Code_Pro_Light:h18 spell spelllang=en_us
 autocmd VimEnter */Notes/**.md colorscheme markdown | execute "AirlineTheme tommorow" | setlocal laststatus=0
  "\ setlocal nonu 
"  \ colorscheme markdown |
" \ setlocal linespace=4 |
" \ setlocal guifont=Source_Code_Pro_Light:h18 
" \ setlocal tw=80 
"}}}
function! GetMarkbookTopic()
  let start = "Notes/"
  let path = expand("%:p")
  return substitute(strpart(path, strridx(path, start)+strlen(start))," ", "-", "g" )
endfunction

function! OpenMarkbook() 
  let url = "http://localhost:3000/".GetMarkbookTopic()
  silent exec "! open ".shellescape(url)
endfunction

command! MarkbookOpen call OpenMarkbook()
map <Leader>mb :call OpenMarkbook()<CR>
